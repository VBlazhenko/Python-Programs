#  Here is a list of algorithms that i have worked on in my university. 
#  They have been made for my course and are ready to go

#  -------------------- COMP 1819 Searching Algorithms --------------------
print("==========  Bubble Sort ==========")


def bubble_sort(my_list):
    for x in range(len(my_list)):
        for y in range(len(my_list) - 1):
            if my_list[y] > my_list[y + 1]:
                my_list[y], my_list[y + 1] = my_list[y + 1], my_list[y]


my_list = [3, 1, 41, 59, 26, 53, 59]
bubble_sort(my_list)
print(my_list)

print("==========  Selection Sort ==========")
print()


def selection_sort(L):
    for i in range(len(L)-1):

        min_index = i

        for j in range(i+1, len(L)-1):
            if L[j] < L[min_index]:
                min_index = j
        L[i], L[min_index] = L[min_index], L[i]


L = [3, 1, 41, 59, 26, 53, 59]
selection_sort(L)
print(L)

print("==========  Intersection Sort ==========")
print()


def insertion_sort(my_array):
    for index in range(1, len(my_array)):
        current_number = my_array[index]
        current_location = index

        while current_location > 0 and my_array[current_location - 1] > current_number:
            my_array[current_location] = my_array[current_location - 1]
            current_location = current_location - 1
        my_array[current_location] = current_number


my_array = [3, 1, 41, 59, 26, 53, 59]
insertion_sort(my_array)
print(str(my_array))

print("==========  Merge Sort ==========")
print()


# Python program for implementation of MergeSort
def mergeSort(arr):
    if len(arr) > 1:

        # Finding the mid of the array
        mid = len(arr) // 2

        # Dividing the array elements
        L = arr[:mid]

        # into 2 halves
        R = arr[mid:]

        # Sorting the first half
        mergeSort(L)

        # Sorting the second half
        mergeSort(R)

        i = j = k = 0

        # Copy data to temp arrays L[] and R[]
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1

        # Checking if any element was left
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1

        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

# Code to print the list

def printList(arr):
    for i in range(len(arr)):
        print(arr[i], end=" ")
    print()


# Driver Code
if __name__ == '__main__':
    arr = [12, 11, 13, 5, 6, 7]
    print("Given array is", end="\n")
    printList(arr)
    mergeSort(arr)
    print("Sorted array is: ", end="\n")
    printList(arr)

print("==========  Quick Sort ==========")
print()


def quick_sort(arr):
    elements = len(arr)

    if elements < 2:
        return arr

    current_posiiton = 0

    for i in range(1, elements):
        if arr[i] <= arr[0]:
            current_posiiton += 1
            temp = arr[i]
            arr[i] = arr[current_posiiton]
            arr[current_posiiton] = temp
    temp = arr[0]
    arr[0] = arr[current_posiiton]
    arr[current_posiiton] = temp

    left = quick_sort(arr[0:current_posiiton])
    rigth = quick_sort(arr[current_posiiton + 1:elements])

    arr = left + [arr[current_posiiton]] + rigth
    return arr


numbers = [3, 1, 41, 59, 26, 53, 59]
print("Sorted array: ", quick_sort(numbers))
